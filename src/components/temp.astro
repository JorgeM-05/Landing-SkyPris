---
let selectedCategory = "Chatbots"; // Categor√≠a inicial
---

<section id="plans">
    <h2>Nuestros Planes</h2>

    <!-- üîπ Botones para cambiar de categor√≠a -->
    <div class="plans-category-buttons">
        <button class="category-btn active" data-category="Chatbots"
            >Chatbots</button
        >
        <button class="category-btn" data-category="E-commerce"
            >E-commerce</button
        >
        <button class="category-btn" data-category="Combos">Combos</button>
        <button class="category-btn" data-category="Desarrollo a Medida"
            >Desarrollo a Medida</button
        >
    </div>

    <!-- üîπ Contenedor de los planes -->
    <div class="plans-container">
        <p>Cargando planes...</p>
    </div>
</section>

<script>
    document.addEventListener("DOMContentLoaded", async () => {
        const buttons = document.querySelectorAll(".category-btn");
        const plansContainer =
            document.querySelector(".plans-container") ??
            document.createElement("div");

        let selectedCategory = "Chatbots";

        // üîπ Definir correctamente el tipo de 'categories' para evitar errores de TypeScript
        let categories: Record<
            string,
            {
                title: string;
                description: string[];
                price: string;
                icon: string;
                isBest: boolean;
            }[]
        > = {};

        try {
            const response = await fetch("/data/categories.json");
            if (!response.ok) throw new Error("No se pudo cargar el JSON.");
            categories = await response.json();
        } catch (error) {
            console.error("‚ùå Error cargando el archivo JSON:", error);
            plansContainer.innerHTML =
                "<p>Error al cargar los planes. Intente de nuevo.</p>";
            return;
        }

        function renderPlans() {
            if (!categories[selectedCategory]) {
                plansContainer.innerHTML = "<p>No hay planes disponibles.</p>";
                return;
            }

            plansContainer.innerHTML = categories[selectedCategory]
                .map(
                    (plan) => `
            <div class="plan-card ${plan.isBest ? "best-plan" : ""}">
                <img src="${plan.icon}" alt="${plan.title}" class="plan-icon" />
                <h3>${plan.title}</h3>
                <p>${plan.description.join(" ")}</p>
                <span class="plan-price">${plan.price}</span>
            </div>
        `,
                )
                .join("");
        }

        buttons.forEach((button) => {
            button.addEventListener("click", () => {
                selectedCategory =
                    button.getAttribute("data-category") || "Chatbots";
                buttons.forEach((btn) => btn.classList.remove("active"));
                button.classList.add("active");
                renderPlans();
            });
        });

        renderPlans();
    });
</script>

<style>
    /* üîπ Secci√≥n Principal */
    #plans {
        text-align: center;
        padding: 80px 20px;
        background: linear-gradient(to bottom, #f8f9fa, #ffffff);
    }

    /* üîπ Botones de Categor√≠a */
    .plans-category-buttons {
        display: flex;
        justify-content: center;
        gap: 15px;
        margin-bottom: 30px;
    }

    .category-btn {
        padding: 12px 20px;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.3s ease-in-out;
        background: #d1d1d1;
        border: none;
        font-size: 1rem;
        box-shadow: 3px 3px 8px rgba(0, 0, 0, 0.2);
    }

    .category-btn.active {
        background: #ff6b6b;
        color: white;
        font-weight: bold;
        box-shadow: 0 5px 15px rgba(255, 107, 107, 0.5);
    }

    /* üîπ Contenedor de Tarjetas */
    .plans-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 20px;
        margin-top: 20px;
        perspective: 1000px; /* üîπ Efecto 3D */
    }

    /* üîπ Tarjeta General */
    .plan-card {
        background: white;
        padding: 20px;
        border-radius: 12px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        text-align: center;
        width: 300px;
        transform: rotateY(0deg);
        transition:
            transform 0.3s ease,
            box-shadow 0.3s ease;
        position: relative;
    }

    .plan-card:hover {
        transform: translateY(-5px) scale(1.05);
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
    }

    /* üîπ Estilo Diferenciado para la Mejor Opci√≥n */
    .plan-card.best-plan {
        background: linear-gradient(135deg, #ffcc5c, #ff6b6b);
        color: white;
        font-weight: bold;
        transform: scale(1.1);
        z-index: 10;
        box-shadow: 0 10px 30px rgba(255, 107, 107, 0.7);
        border: 2px solid white;
    }

    /* üîπ Icono */
    .plan-icon {
        width: 60px;
        margin-bottom: 10px;
    }

    /* üîπ Precio */
    .plan-price {
        font-weight: bold;
        font-size: 1.3rem;
        display: block;
        margin-top: 10px;
    }

    /* üîπ Responsive */
    @media (max-width: 768px) {
        .plans-container {
            flex-direction: column;
        }

        .plan-card {
            width: 100%;
            max-width: 350px;
            margin: 0 auto;
        }

        .plans-category-buttons {
            flex-wrap: wrap;
        }
    }
</style>
